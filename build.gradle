plugins {
    id 'java'
    id 'application'
}

application {
    mainClass = 'com.discardsoft.j3D.launcher.JLaunchMain'
    
    // Add macOS-specific JVM arguments for Swing/AWT applications
    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        applicationDefaultJvmArgs = [
            '-Djava.awt.headless=false',
            '-Dapple.awt.UIElement=false',
            '-Dapple.laf.useScreenMenuBar=true'
        ]
    }
}

import org.gradle.internal.os.OperatingSystem

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        def osArch = System.getProperty("os.arch")
        if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
            project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
        } else if  (osArch.startsWith("ppc")) {
            project.ext.lwjglNatives += "-ppc64le"
        } else if  (osArch.startsWith("riscv")) {
            project.ext.lwjglNatives += "-riscv64"
        }
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos-arm64"
        break
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
}

group = 'com.discardsoft'
version = '0.0.7'

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

project.ext.lwjglVersion = "3.3.6"
project.ext.steamworks4jVersion = "1.9.0"
project.ext["steamworks4j-serverVersion"] = "1.9.0"
project.ext.jomlVersion = "1.10.8"
project.ext.jomlPrimVersion = "1.10.8"

dependencies {
    implementation "org.joml:joml:${jomlVersion}"
    implementation "org.joml:joml:${jomlVersion}"
    
    // JSON serialization for level files
    implementation 'com.google.code.gson:gson:2.10.1'

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    implementation "com.code-disaster.steamworks4j:steamworks4j:${steamworks4jVersion}"
    implementation "com.code-disaster.steamworks4j:steamworks4j-server:${project.ext["steamworks4j-serverVersion"]}"
}

test {
    useJUnitPlatform()
}

<<<<<<< HEAD
// The main application entry point is the jLauncher (JLaunchMain)
// Use './gradlew run' to start the launcher, which provides access to:
// - j3D Engine 
// - jEDIT Level Editor
// This ensures proper macOS threading and provides a unified entry point
=======
// Custom task to run j3D Engine directly
task runJ3D(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.discardsoft.j3D.Main'
    
    // Common settings
    standardInput = System.in
    standardOutput = System.out
    errorOutput = System.err
    
    // Add macOS-specific JVM arguments
    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        jvmArgs '-XstartOnFirstThread'
    }
    
    doFirst {
        println "Running j3D Engine directly..."
    }
}

// Custom task to run jEDIT Level Editor
task runJEdit(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.discardsoft.j3D.tools.jEdit.JEditMain'
    
    // Common settings
    standardInput = System.in
    standardOutput = System.out
    errorOutput = System.err
    
    // Add macOS-specific JVM arguments
    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        // This is needed for LWJGL but may interfere with Swing on macOS
        // jvmArgs '-XstartOnFirstThread'
        
        // These are for macOS Swing/AWT applications
        systemProperty 'apple.awt.UIElement', 'false'
        systemProperty 'java.awt.headless', 'false'
        systemProperty 'awt.toolkit', 'sun.lwawt.macosx.LWCToolkit'
    }
}

// Custom task to run jEDIT Level Editor through the launcher
task runJEditLauncher(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.discardsoft.j3D.tools.jEdit.JEditLauncher'
    
    // Common settings
    standardInput = System.in
    standardOutput = System.out
    errorOutput = System.err
    
    // Add macOS-specific properties
    systemProperty 'apple.awt.UIElement', 'false'
    systemProperty 'java.awt.headless', 'false'
    
    doFirst {
        println "Running jEDIT through the launcher..."
    }
}

// Simple launcher task with minimal dependencies
task runSimpleJEdit(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.discardsoft.j3D.tools.jEdit.SimpleJEditLauncher'
    
    // Common settings
    standardInput = System.in
    standardOutput = System.out
    errorOutput = System.err
    
    doFirst {
        println "Running simple jEDIT launcher..."
    }
}
>>>>>>> 17c9c00c2e79cafce7dec514087a619cb307d559

repositories {
    mavenCentral()
}
